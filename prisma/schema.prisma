// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователь
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // Хэш пароля
  email     String?  @unique
  name      String   @default("Мастер")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects     Project[]
  creditBudget CreditBudget?
  requestLogs  RequestLog[]
}

// Проект/Кампания
model Project {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  synopsis    String?  // Синопсис кампании
  setting     String?  // Сеттинг (забытые королевства, эберрон и т.д.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes           Scene[]
  npcs             NPC[]
  encounters       Encounter[]
  quests           Quest[]
  sessions         Session[]
  playerCharacters PlayerCharacter[]
}

// Сцена/StoryBeat
model Scene {
  id          String   @id @default(uuid())
  projectId   String
  title       String
  description String   // Полное описание сцены
  sceneType   String   @default("story") // story, combat, social, exploration
  order       Int      @default(0) // Порядок в кампании
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// NPC
model NPC {
  id                 String   @id @default(uuid())
  projectId          String
  name               String
  race               String?
  class              String?
  level              Int?
  alignment          String?
  personality        String?  // Черты личности
  backstory          String?  // Предыстория
  appearance         String?  // Внешность
  motivations        String?  // Мотивации
  stats              String?  // JSON со статами (STR, DEX, CON, INT, WIS, CHA)
  imageUrl           String?  // URL сгенерированного портрета
  roleInScene        String?  // Роль в сцене (гид/мешает/торгуется/наблюдает/вводит драму)
  hiddenAgenda       String?  // Скрытый интерес
  interactionOptions String?  // JSON с вариантами взаимодействия (fight/negotiate/ignore)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Энкаунтер (боевой или социальный)
model Encounter {
  id             String   @id @default(uuid())
  projectId      String
  title          String
  description    String
  encounterType  String   @default("combat") // combat, social, trap, puzzle
  difficulty     String?  // easy, medium, hard, deadly
  monsters       String?  // JSON с монстрами из SRD
  environment    String?  // Описание окружения
  tactics        String?  // Тактика врагов
  rewards        String?  // Награды
  estimatedLevel Int?     // Рекомендуемый уровень группы
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Бюджет токенов
model CreditBudget {
  id              String   @id @default(uuid())
  userId          String   @unique
  tier            String   @default("lite") // lite, pro, studio
  totalTokens     Int      @default(50000) // Общий лимит токенов
  usedTokens      Int      @default(0) // Использовано токенов
  resetAt         DateTime // Дата сброса (обычно начало месяца)
  stripeCustomerId String? // Для будущей интеграции с платежами
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Лог запросов к LLM
model RequestLog {
  id               String   @id @default(uuid())
  userId           String
  requestType      String   // session, scene, npc, encounter
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  model            String   @default("gpt-4o-mini")
  success          Boolean  @default(true)
  errorMessage     String?
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Квест
model Quest {
  id                String   @id @default(uuid())
  projectId         String
  title             String
  questType         String   @default("investigation") // rescue, investigation, escort, heist, defense, delivery, assassination, diplomatic
  description       String   // Общее описание квеста
  questGiverId      String?  // ID NPC квестодателя (опционально)
  questGiverName    String?  // Имя квестодателя (если нет в NPC)
  objective         String   // Главная цель
  obstacles         String?  // JSON с препятствиями
  rewards           String?  // JSON с наградами (gold, items, xp, reputation)
  complications     String?  // Возможные осложнения
  consequences      String?  // JSON с последствиями (success/failure)
  twist             String?  // Неожиданный поворот
  status            String   @default("available") // available, active, completed, failed
  difficulty        String   @default("medium") // easy, medium, hard
  estimatedSessions Int      @default(1) // Примерная длительность
  relatedScenes     String?  // JSON с ID связанных сцен
  relatedNPCs       String?  // JSON с ID связанных NPC
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Персонаж игрока
model PlayerCharacter {
  id           String   @id @default(uuid())
  projectId    String
  playerName   String   // Имя игрока (реальный человек)
  characterName String   // Имя персонажа
  race         String
  class        String
  level        Int      @default(1)
  background   String?  // Предыстория (Background)
  alignment    String?

  // Основные характеристики
  strength     Int      @default(10)
  dexterity    Int      @default(10)
  constitution Int      @default(10)
  intelligence Int      @default(10)
  wisdom       Int      @default(10)
  charisma     Int      @default(10)

  // Игровые параметры
  maxHP        Int      @default(10)
  currentHP    Int      @default(10)
  armorClass   Int      @default(10)
  speed        Int      @default(30)
  initiative   Int      @default(0)
  proficiencyBonus Int  @default(2)

  // Навыки и спасброски
  savingThrows String?  // JSON с профами спасбросков
  skills       String?  // JSON с навыками и профами

  // Инвентарь и снаряжение
  inventory    String?  // JSON с предметами
  equipment    String?  // JSON с экипированными предметами
  gold         Int      @default(0)

  // Заклинания (для кастеров)
  spells       String?  // JSON со списком заклинаний
  spellSlots   String?  // JSON с ячейками заклинаний

  // Дополнительно
  appearance   String?  // Внешность
  personality  String?  // Черты личности
  backstory    String?  // Предыстория персонажа
  notes        String?  // Заметки мастера об этом персонаже
  imageUrl     String?  // Портрет персонажа

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Сессия (игровая встреча)
model Session {
  id           String   @id @default(uuid())
  projectId    String
  sessionNumber Int     // Номер сессии (1, 2, 3...)
  title        String   @default("Сессия") // Название сессии
  date         DateTime @default(now()) // Дата проведения
  duration     Int?     // Длительность в минутах

  // Заметки
  summary      String?  // Краткое резюме что произошло
  notes        String?  // Детальные заметки мастера
  playerDecisions String? // Важные решения игроков
  combatLog    String?  // Лог боёв (опционально)

  // Связи
  scenesPlayed String?  // JSON с ID сцен, которые были пройдены
  npcsEncountered String? // JSON с ID NPC, с которыми встретились
  questsUpdated String?  // JSON с обновлениями квестов

  // Награды и прогресс
  xpAwarded    Int?     // Выданный опыт
  lootAcquired String?  // JSON с полученными предметами

  // Для следующей сессии
  cliffhanger  String?  // На чём остановились
  nextGoals    String?  // Цели на следующую сессию

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

