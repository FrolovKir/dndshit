'use client';

import { useState } from 'react';
import Button from './Button';
import Select from './Select';
import Input from './Input';
import Textarea from './Textarea';

interface GenerateQuestFormProps {
  projectId: string;
  onSuccess?: () => void;
}

export default function GenerateQuestForm({ projectId, onSuccess }: GenerateQuestFormProps) {
  const [questType, setQuestType] = useState('investigation');
  const [difficulty, setDifficulty] = useState('medium');
  const [partyLevel, setPartyLevel] = useState<number>(3);
  const [context, setContext] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/generate/quest', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectId,
          questType,
          difficulty,
          partyLevel: partyLevel || undefined,
          context: context || undefined,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || data.message || 'Generation failed');
      }

      // –£—Å–ø–µ—Ö
      if (onSuccess) {
        onSuccess();
      }

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setContext('');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="bg-red-900/20 border border-red-500 rounded p-3 text-sm text-red-400">
          {error}
        </div>
      )}

      <Select
        label="–¢–∏–ø –∫–≤–µ—Å—Ç–∞"
        value={questType}
        onChange={(e) => setQuestType(e.target.value)}
        required
      >
        <option value="investigation">üîç –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</option>
        <option value="rescue">üÜò –°–ø–∞—Å–µ–Ω–∏–µ</option>
        <option value="escort">üö∂ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</option>
        <option value="delivery">üì¶ –î–æ—Å—Ç–∞–≤–∫–∞</option>
        <option value="heist">üí∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ</option>
        <option value="defense">üõ°Ô∏è –ó–∞—â–∏—Ç–∞</option>
        <option value="assassination">‚öîÔ∏è –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ</option>
        <option value="diplomatic">ü§ù –î–∏–ø–ª–æ–º–∞—Ç–∏—è</option>
      </Select>

      <Select
        label="–°–ª–æ–∂–Ω–æ—Å—Ç—å"
        value={difficulty}
        onChange={(e) => setDifficulty(e.target.value)}
        required
      >
        <option value="easy">–õ—ë–≥–∫–∏–π</option>
        <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
        <option value="hard">–°–ª–æ–∂–Ω—ã–π</option>
      </Select>

      <Input
        label="–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–∏–∏ (–æ–ø—Ü.)"
        type="number"
        min="1"
        max="20"
        value={partyLevel}
        onChange={(e) => setPartyLevel(parseInt(e.target.value) || 3)}
      />

      <Textarea
        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü.)"
        value={context}
        onChange={(e) => setContext(e.target.value)}
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–≤–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –≥–ª–∞–≤–Ω—ã–º –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç–æ–º, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –ª–µ—Å—É, –≤–∫–ª—é—á–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —ç–ª—å—Ñ–∞–º–∏..."
        rows={3}
      />

      <div className="bg-blue-900/20 border border-blue-500/30 rounded p-3 text-xs text-gray-400">
        üí° AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –∫–∞–∫ –∫–≤–µ—Å—Ç–æ–¥–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–≤–µ—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–µ—Ç—Ç–∏–Ω–≥—É
      </div>

      <Button type="submit" disabled={loading} fullWidth>
        {loading ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞...' : 'üìú –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç'}
      </Button>
    </form>
  );
}

