'use client';

import { useState } from 'react';
import Button from './Button';
import Select from './Select';
import Textarea from './Textarea';

interface Project {
  id: string;
  title: string;
}

interface GenerateSceneFormProps {
  projects: Project[];
  projectId?: string; // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
}

export default function GenerateSceneForm({ projects, projectId }: GenerateSceneFormProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [generatedScene, setGeneratedScene] = useState<any>(null);
  const [formData, setFormData] = useState({
    projectId: projectId || '',
    sceneContext: '',
    tone: 'adventure',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!(formData.projectId || projectId)) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess(false);

    try {
      const res = await fetch('/api/generate/scene', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      }

      setSuccess(true);
      setGeneratedScene(data.scene);
      setFormData({ ...formData, sceneContext: '' });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {(!projectId && projects.length === 0) ? (
        <div className="p-4 bg-gray-800 rounded-lg text-gray-400 text-center">
          –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ—ë —Å—Ü–µ–Ω—ã
        </div>
      ) : (
        <>
          {!projectId && (
            <Select
              label="–ü—Ä–æ–µ–∫—Ç"
              options={[
                { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç...' },
                ...projects.map((p) => ({ value: p.id, label: p.title })),
              ]}
              value={formData.projectId}
              onChange={(e) => setFormData({ ...formData, projectId: e.target.value })}
            />
          )}

          <Textarea
            label="–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã"
            placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Å—Ü–µ–Ω–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ì–µ—Ä–æ–∏ –≤—Ö–æ–¥—è—Ç –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Ö—Ä–∞–º, –≥–¥–µ –∏—Ö –∂–¥—ë—Ç –∑–∞—Å–∞–¥–∞'"
            value={formData.sceneContext}
            onChange={(e) => setFormData({ ...formData, sceneContext: e.target.value })}
            rows={4}
          />

          <Select
            label="–¢–æ–Ω —Å—Ü–µ–Ω—ã"
            options={[
              { value: 'adventure', label: '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π' },
              { value: 'dark', label: '–¢—ë–º–Ω—ã–π/–•–æ—Ä—Ä–æ—Ä' },
              { value: 'humorous', label: '–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π' },
              { value: 'dramatic', label: '–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π' },
              { value: 'mysterious', label: '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π' },
            ]}
            value={formData.tone}
            onChange={(e) => setFormData({ ...formData, tone: e.target.value })}
          />

          {error && (
            <div className="p-4 bg-danger/10 border border-danger rounded-lg text-danger">
              {error}
            </div>
          )}

          {success && generatedScene && (
            <div className="p-4 bg-secondary/10 border border-secondary rounded-lg text-secondary animate-fade-in">
              <div className="font-bold mb-2">‚úì –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞!</div>
              <div className="text-sm">
                <span className="font-medium">{generatedScene.title}</span>
                <br />
                <span className="text-xs opacity-80">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</span>
              </div>
            </div>
          )}

          <Button type="submit" loading={loading} className="w-full">
            üé¨ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É
          </Button>
        </>
      )}
    </form>
  );
}

