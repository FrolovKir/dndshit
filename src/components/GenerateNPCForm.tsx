'use client';

import { useState } from 'react';
import Button from './Button';
import Input from './Input';
import Select from './Select';
import Textarea from './Textarea';

interface Project {
  id: string;
  title: string;
}

interface GenerateNPCFormProps {
  projects: Project[];
  projectId?: string;
  scenes?: { id: string; title: string }[];
}

export default function GenerateNPCForm({ projects, projectId, scenes }: GenerateNPCFormProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [generatedNPC, setGeneratedNPC] = useState<any>(null);
  const [formData, setFormData] = useState({
    projectId: projectId || '',
    sceneId: '',
    role: '',
    race: '',
    npcClass: '',
    alignment: '',
    context: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!(formData.projectId || projectId)) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess(false);

    try {
      const res = await fetch('/api/generate/npc', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectId: formData.projectId || projectId,
          role: formData.role || undefined,
          race: formData.race || undefined,
          npcClass: formData.npcClass || undefined,
          alignment: formData.alignment || undefined,
          context: formData.context || undefined,
        }),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      }

      setSuccess(true);
      setGeneratedNPC(data.npc);
      setFormData({ ...formData, role: '', race: '', npcClass: '', context: '', sceneId: '' });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ NPC
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {(!projectId && projects.length === 0) ? (
        <div className="p-4 bg-gray-800 rounded-lg text-gray-400 text-center">
          –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ—ë NPC
        </div>
      ) : (
        <>
          {!projectId && (
            <Select
              label="–ü—Ä–æ–µ–∫—Ç"
              options={[
                { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç...' },
                ...projects.map((p) => ({ value: p.id, label: p.title })),
              ]}
              value={formData.projectId}
              onChange={(e) => setFormData({ ...formData, projectId: e.target.value })}
            />
          )}

          {scenes && scenes.length > 0 && (
            <Select
              label="–°—Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              options={[
                { value: '', label: '–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏' },
                ...scenes.map((s) => ({ value: s.id, label: s.title })),
              ]}
              value={formData.sceneId}
              onChange={(e) => setFormData({ ...formData, sceneId: e.target.value })}
            />
          )}

          <Input
            label="–†–æ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–≤–µ—Å—Ç–æ–¥–∞—Ç–µ–ª—å, —Ç–æ—Ä–≥–æ–≤–µ—Ü, –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç..."
            value={formData.role}
            onChange={(e) => setFormData({ ...formData, role: e.target.value })}
          />

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Input
              label="–†–∞—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              placeholder="–≠–ª—å—Ñ, –ß–µ–ª–æ–≤–µ–∫, –î–≤–∞—Ä—Ñ..."
              value={formData.race}
              onChange={(e) => setFormData({ ...formData, race: e.target.value })}
            />

            <Input
              label="–ö–ª–∞—Å—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              placeholder="–í–æ–∏–Ω, –ú–∞–≥, –ñ—Ä–µ—Ü..."
              value={formData.npcClass}
              onChange={(e) => setFormData({ ...formData, npcClass: e.target.value })}
            />

            <Select
              label="–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ"
              options={[
                { value: '', label: '–°–ª—É—á–∞–π–Ω–æ–µ' },
                { value: 'Lawful Good', label: '–ó–∞–∫–æ–Ω–Ω—ã–π –¥–æ–±—Ä—ã–π' },
                { value: 'Neutral Good', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–æ–±—Ä—ã–π' },
                { value: 'Chaotic Good', label: '–•–∞–æ—Ç–∏—á–Ω—ã–π –¥–æ–±—Ä—ã–π' },
                { value: 'Lawful Neutral', label: '–ó–∞–∫–æ–Ω–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' },
                { value: 'True Neutral', label: '–ò—Å—Ç–∏–Ω–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' },
                { value: 'Chaotic Neutral', label: '–•–∞–æ—Ç–∏—á–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' },
                { value: 'Lawful Evil', label: '–ó–∞–∫–æ–Ω–Ω—ã–π –∑–ª–æ–π' },
                { value: 'Neutral Evil', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∑–ª–æ–π' },
                { value: 'Chaotic Evil', label: '–•–∞–æ—Ç–∏—á–Ω—ã–π –∑–ª–æ–π' },
              ]}
              value={formData.alignment}
              onChange={(e) => setFormData({ ...formData, alignment: e.target.value })}
            />
          </div>

          <Textarea
            label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ..."
            value={formData.context}
            onChange={(e) => setFormData({ ...formData, context: e.target.value })}
            rows={3}
          />

          {error && (
            <div className="p-4 bg-danger/10 border border-danger rounded-lg text-danger">
              {error}
            </div>
          )}

          {success && generatedNPC && (
            <div className="p-4 bg-secondary/10 border border-secondary rounded-lg text-secondary animate-fade-in">
              <div className="font-bold mb-2">‚úì NPC —Å–æ–∑–¥–∞–Ω!</div>
              <div className="text-sm">
                <span className="font-medium">{generatedNPC.name}</span>
                {generatedNPC.race && generatedNPC.class && (
                  <span className="text-xs opacity-80"> ‚Äî {generatedNPC.race} {generatedNPC.class}</span>
                )}
                <br />
                <span className="text-xs opacity-80">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</span>
              </div>
            </div>
          )}

          <Button type="submit" loading={loading} className="w-full">
            üé≠ –°–æ–∑–¥–∞—Ç—å NPC
          </Button>
        </>
      )}
    </form>
  );
}

