'use client';

import { useState } from 'react';
import Button from './Button';
import Input from './Input';
import Select from './Select';
import Textarea from './Textarea';

interface GenerateSessionFormProps {
  onSuccess?: () => void;
}

export default function GenerateSessionForm({ onSuccess }: GenerateSessionFormProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [generatedData, setGeneratedData] = useState<any>(null);
  const [formData, setFormData] = useState({
    theme: '',
    setting: 'Forgotten Realms',
    level: '1-5',
    playerCount: '4',
    atmosphericDescription: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess(false);

    try {
      const res = await fetch('/api/generate/session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          theme: formData.theme || undefined,
          setting: formData.setting,
          level: formData.level,
          playerCount: parseInt(formData.playerCount),
          atmosphericDescription: formData.atmosphericDescription || undefined,
        }),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      }

      setSuccess(true);
      setGeneratedData(data);
      setFormData({ theme: '', setting: 'Forgotten Realms', level: '1-5', playerCount: '4', atmosphericDescription: '' });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
      if (data.stats) {
        const statsMsg = `‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${data.stats.scenesCreated} —Å—Ü–µ–Ω, ${data.stats.npcsCreated} NPC, ${data.stats.encountersCreated} —ç–Ω–∫–∞—É–Ω—Ç–µ—Ä–æ–≤`;
        console.log(statsMsg);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        if (onSuccess) {
          onSuccess();
        }
      }, 500);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Textarea
        label="–¢–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–≥–æ –±–æ–≥–∞, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏..."
        value={formData.theme}
        onChange={(e) => setFormData({ ...formData, theme: e.target.value })}
        rows={2}
      />

      <Textarea
        label="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        placeholder="–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å: '–¢—ë–º–Ω–∞—è –∏ –º—Ä–∞—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –¥—É—Ö–µ –≥–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ—Ä—Ä–æ—Ä–∞, –≥–¥–µ –∫–∞–∂–¥–∞—è —Ç–µ–Ω—å —Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å...' –∏–ª–∏ '–í–µ—Å—ë–ª–æ–µ –∏ –ª—ë–≥–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥—É—Ö–µ –ú–æ–Ω—Ç–∏ –ü–∞–π—Ç–æ–Ω–∞ —Å —é–º–æ—Ä–æ–º –∏ –∞–±—Å—É—Ä–¥–æ–º...'"
        value={formData.atmosphericDescription}
        onChange={(e) => setFormData({ ...formData, atmosphericDescription: e.target.value })}
        rows={3}
      />

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Select
          label="–°–µ—Ç—Ç–∏–Ω–≥"
          options={[
            { value: 'Forgotten Realms', label: '–ó–∞–±—ã—Ç—ã–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞' },
            { value: 'Eberron', label: '–≠–±–µ—Ä—Ä–æ–Ω' },
            { value: 'Greyhawk', label: '–ì—Ä–µ–π—Ö–æ–∫' },
            { value: 'Custom', label: '–°–≤–æ–π –º–∏—Ä' },
          ]}
          value={formData.setting}
          onChange={(e) => setFormData({ ...formData, setting: e.target.value })}
        />

        <Select
          label="–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
          options={[
            { value: '1-5', label: '1-5 —É—Ä–æ–≤–µ–Ω—å' },
            { value: '5-10', label: '5-10 —É—Ä–æ–≤–µ–Ω—å' },
            { value: '10-15', label: '10-15 —É—Ä–æ–≤–µ–Ω—å' },
            { value: '15-20', label: '15-20 —É—Ä–æ–≤–µ–Ω—å' },
          ]}
          value={formData.level}
          onChange={(e) => setFormData({ ...formData, level: e.target.value })}
        />

        <Input
          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"
          type="number"
          min="2"
          max="8"
          value={formData.playerCount}
          onChange={(e) => setFormData({ ...formData, playerCount: e.target.value })}
        />
      </div>

      {error && (
        <div className="p-4 bg-danger/10 border border-danger rounded-lg text-danger">
          {error}
        </div>
      )}

      {success && generatedData && (
        <div className="p-4 bg-secondary/10 border border-secondary rounded-lg text-secondary animate-fade-in">
          <div className="font-bold text-lg mb-3">
            ‚úì –ö–∞–º–ø–∞–Ω–∏—è "{generatedData.project?.title || '–ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è'}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
          </div>
          <div className="text-sm space-y-2">
            <p className="font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</p>
            <div className="grid grid-cols-3 gap-2 my-3">
              <div className="bg-secondary/20 rounded p-2 text-center">
                <div className="text-xl font-bold">{generatedData.stats?.scenesCreated || 0}</div>
                <div className="text-xs">—Å—Ü–µ–Ω</div>
              </div>
              <div className="bg-secondary/20 rounded p-2 text-center">
                <div className="text-xl font-bold">{generatedData.stats?.npcsCreated || 0}</div>
                <div className="text-xs">NPC</div>
              </div>
              <div className="bg-secondary/20 rounded p-2 text-center">
                <div className="text-xl font-bold">{generatedData.stats?.encountersCreated || 0}</div>
                <div className="text-xs">—ç–Ω–∫–∞—É–Ω—Ç–µ—Ä–æ–≤</div>
              </div>
            </div>
            <p className="text-xs opacity-80">
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π.
            </p>
          </div>
        </div>
      )}

      <Button type="submit" loading={loading} className="w-full">
        üé≤ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
      </Button>
    </form>
  );
}

