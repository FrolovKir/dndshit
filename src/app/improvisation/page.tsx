'use client';

import { useState } from 'react';
import Card from '@/components/Card';
import Button from '@/components/Button';
import Select from '@/components/Select';
import Input from '@/components/Input';

// –¢–∏–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
interface GenerationResult {
  id: string;
  type: string;
  timestamp: Date;
  data: any;
}

export default function ImprovisationPage() {
  const [loading, setLoading] = useState(false);
  const [history, setHistory] = useState<GenerationResult[]>([]);
  const [error, setError] = useState<string | null>(null);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
  const [nameType, setNameType] = useState<'person' | 'place' | 'tavern' | 'organization'>('person');
  const [nameRace, setNameRace] = useState('');
  const [nameStyle, setNameStyle] = useState<'common' | 'exotic' | 'dark' | 'noble'>('common');

  const [npcRole, setNpcRole] = useState('');
  const [npcMood, setNpcMood] = useState<'friendly' | 'suspicious' | 'hostile' | 'indifferent' | 'comedic' | 'mysterious'>('friendly');
  const [npcRace, setNpcRace] = useState('');

  const [eventLocation, setEventLocation] = useState<'city' | 'wilderness' | 'dungeon' | 'tavern' | 'road'>('city');
  const [eventTone, setEventTone] = useState<'neutral' | 'dangerous' | 'comedic' | 'mysterious' | 'dramatic'>('neutral');

  const [lootSource, setLootSource] = useState<'pocket' | 'chest' | 'corpse' | 'ruins' | 'treasure'>('chest');
  const [lootValue, setLootValue] = useState<'worthless' | 'common' | 'valuable' | 'magical'>('common');

  const [locationType, setLocationType] = useState<'room' | 'building' | 'outdoor' | 'encounter_site'>('room');
  const [locationStyle, setLocationStyle] = useState('');
  const [locationAtmosphere, setLocationAtmosphere] = useState<'welcoming' | 'creepy' | 'mysterious' | 'dangerous' | 'peaceful'>('welcoming');

  const [complicationEnvironment, setComplicationEnvironment] = useState('');
  const [twistContext, setTwistContext] = useState('');
  const [twistIntensity, setTwistIntensity] = useState<'minor' | 'moderate' | 'major'>('moderate');

  const [dialogueNpcType, setDialogueNpcType] = useState('');
  const [dialogueSituation, setDialogueSituation] = useState('');

  const generateQuick = async (type: string, params: Record<string, any>) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/generate/quick', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, params }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Generation failed');
      }

      // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
      const result: GenerationResult = {
        id: Math.random().toString(36).substr(2, 9),
        type,
        timestamp: new Date(),
        data: data.data,
      };

      setHistory([result, ...history]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  const clearHistory = () => {
    setHistory([]);
  };

  const removeFromHistory = (id: string) => {
    setHistory(history.filter((item) => item.id !== id));
  };

  // –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const generateName = () => {
    generateQuick('name', {
      type: nameType,
      race: nameRace || undefined,
      style: nameStyle,
    });
  };

  const generateNPC = () => {
    if (!npcRole) {
      setError('–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å NPC (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–∞—Ä–º–µ–Ω, —Å—Ç—Ä–∞–∂–Ω–∏–∫, —Ç–æ—Ä–≥–æ–≤–µ—Ü)');
      return;
    }
    generateQuick('npc', {
      role: npcRole,
      mood: npcMood,
      race: npcRace || undefined,
    });
  };

  const generateEvent = () => {
    generateQuick('event', {
      location: eventLocation,
      tone: eventTone,
    });
  };

  const generateLoot = () => {
    generateQuick('loot', {
      source: lootSource,
      value: lootValue,
    });
  };

  const generateLocation = () => {
    generateQuick('location', {
      type: locationType,
      style: locationStyle || undefined,
      atmosphere: locationAtmosphere,
    });
  };

  const generateComplication = () => {
    generateQuick('complication', {
      environment: complicationEnvironment || undefined,
    });
  };

  const generateTwist = () => {
    generateQuick('twist', {
      context: twistContext || undefined,
      intensity: twistIntensity,
    });
  };

  const generateDialogue = () => {
    if (!dialogueNpcType || !dialogueSituation) {
      setError('–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø NPC –∏ —Å–∏—Ç—É–∞—Ü–∏—é');
      return;
    }
    generateQuick('dialogue', {
      npcType: dialogueNpcType,
      situation: dialogueSituation,
    });
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-2">‚ö° –ü–∞–Ω–µ–ª—å –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏–∏</h1>
        <p className="text-gray-400">
          –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –º–∞—Å—Ç–µ—Ä—É –Ω–∞ —Ö–æ–¥—É
        </p>
      </div>

      {/* Error message */}
      {error && (
        <Card className="bg-red-900/20 border-red-500">
          <p className="text-red-400">{error}</p>
        </Card>
      )}

      {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Å–µ—Ç–∫–µ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º—ë–Ω */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üé≠ –ò–º–µ–Ω–∞</h3>
          <div className="space-y-3">
            <Select
              label="–¢–∏–ø"
              value={nameType}
              onChange={(e) => setNameType(e.target.value as any)}
            >
              <option value="person">–ü–µ—Ä—Å–æ–Ω–∞–∂</option>
              <option value="place">–ú–µ—Å—Ç–æ</option>
              <option value="tavern">–¢–∞–≤–µ—Ä–Ω–∞</option>
              <option value="organization">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</option>
            </Select>

            {nameType === 'person' && (
              <>
                <Input
                  label="–†–∞—Å–∞ (–æ–ø—Ü.)"
                  value={nameRace}
                  onChange={(e) => setNameRace(e.target.value)}
                  placeholder="–≠–ª—å—Ñ, –¥–≤–∞—Ä—Ñ, —á–µ–ª–æ–≤–µ–∫..."
                />
                <Select
                  label="–°—Ç–∏–ª—å"
                  value={nameStyle}
                  onChange={(e) => setNameStyle(e.target.value as any)}
                >
                  <option value="common">–û–±—ã—á–Ω–æ–µ</option>
                  <option value="exotic">–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–æ–µ</option>
                  <option value="dark">–¢—ë–º–Ω–æ–µ</option>
                  <option value="noble">–ë–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–µ</option>
                </Select>
              </>
            )}

            <Button onClick={generateName} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 2. –ë—ã—Å—Ç—Ä—ã–π NPC */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üë§ –ë—ã—Å—Ç—Ä—ã–π NPC</h3>
          <div className="space-y-3">
            <Input
              label="–†–æ–ª—å"
              value={npcRole}
              onChange={(e) => setNpcRole(e.target.value)}
              placeholder="–ë–∞—Ä–º–µ–Ω, —Å—Ç—Ä–∞–∂–Ω–∏–∫, —Ç–æ—Ä–≥–æ–≤–µ—Ü..."
            />
            <Input
              label="–†–∞—Å–∞ (–æ–ø—Ü.)"
              value={npcRace}
              onChange={(e) => setNpcRace(e.target.value)}
              placeholder="–ß–µ–ª–æ–≤–µ–∫, —ç–ª—å—Ñ, –¥–≤–∞—Ä—Ñ..."
            />
            <Select
              label="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
              value={npcMood}
              onChange={(e) => setNpcMood(e.target.value as any)}
            >
              <option value="friendly">–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</option>
              <option value="suspicious">–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π</option>
              <option value="hostile">–í—Ä–∞–∂–¥–µ–±–Ω—ã–π</option>
              <option value="indifferent">–ë–µ–∑—Ä–∞–∑–ª–∏—á–Ω—ã–π</option>
              <option value="comedic">–ö–æ–º–∏—á–Ω—ã–π</option>
              <option value="mysterious">–ó–∞–≥–∞–¥–æ—á–Ω—ã–π</option>
            </Select>

            <Button onClick={generateNPC} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 3. –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üé≤ –°–æ–±—ã—Ç–∏–µ</h3>
          <div className="space-y-3">
            <Select
              label="–õ–æ–∫–∞—Ü–∏—è"
              value={eventLocation}
              onChange={(e) => setEventLocation(e.target.value as any)}
            >
              <option value="city">–ì–æ—Ä–æ–¥</option>
              <option value="wilderness">–î–∏–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
              <option value="dungeon">–ü–æ–¥–∑–µ–º–µ–ª—å–µ</option>
              <option value="tavern">–¢–∞–≤–µ—Ä–Ω–∞</option>
              <option value="road">–î–æ—Ä–æ–≥–∞</option>
            </Select>
            <Select
              label="–¢–æ–Ω"
              value={eventTone}
              onChange={(e) => setEventTone(e.target.value as any)}
            >
              <option value="neutral">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
              <option value="dangerous">–û–ø–∞—Å–Ω—ã–π</option>
              <option value="comedic">–ö–æ–º–∏—á–Ω—ã–π</option>
              <option value="mysterious">–ó–∞–≥–∞–¥–æ—á–Ω—ã–π</option>
              <option value="dramatic">–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π</option>
            </Select>

            <Button onClick={generateEvent} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 4. –ù–∞—Ö–æ–¥–∫–∏/–õ—É—Ç */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üíé –ù–∞—Ö–æ–¥–∫–∏</h3>
          <div className="space-y-3">
            <Select
              label="–ò—Å—Ç–æ—á–Ω–∏–∫"
              value={lootSource}
              onChange={(e) => setLootSource(e.target.value as any)}
            >
              <option value="pocket">–ö–∞—Ä–º–∞–Ω</option>
              <option value="chest">–°—É–Ω–¥—É–∫</option>
              <option value="corpse">–¢—Ä—É–ø</option>
              <option value="ruins">–†—É–∏–Ω—ã</option>
              <option value="treasure">–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞</option>
            </Select>
            <Select
              label="–¶–µ–Ω–Ω–æ—Å—Ç—å"
              value={lootValue}
              onChange={(e) => setLootValue(e.target.value as any)}
            >
              <option value="worthless">–ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ–µ</option>
              <option value="common">–û–±—ã—á–Ω–æ–µ</option>
              <option value="valuable">–¶–µ–Ω–Ω–æ–µ</option>
              <option value="magical">–ú–∞–≥–∏—á–µ—Å–∫–æ–µ</option>
            </Select>

            <Button onClick={generateLoot} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 5. –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üè∞ –õ–æ–∫–∞—Ü–∏—è</h3>
          <div className="space-y-3">
            <Select
              label="–¢–∏–ø"
              value={locationType}
              onChange={(e) => setLocationType(e.target.value as any)}
            >
              <option value="room">–ö–æ–º–Ω–∞—Ç–∞</option>
              <option value="building">–ó–¥–∞–Ω–∏–µ</option>
              <option value="outdoor">–í–Ω–µ—à–Ω—è—è –ª–æ–∫–∞—Ü–∏—è</option>
              <option value="encounter_site">–ú–µ—Å—Ç–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è</option>
            </Select>
            <Input
              label="–°—Ç–∏–ª—å (–æ–ø—Ü.)"
              value={locationStyle}
              onChange={(e) => setLocationStyle(e.target.value)}
              placeholder="–¢–∞–≤–µ—Ä–Ω–∞, —Ö—Ä–∞–º, –ª–µ—Å..."
            />
            <Select
              label="–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞"
              value={locationAtmosphere}
              onChange={(e) => setLocationAtmosphere(e.target.value as any)}
            >
              <option value="welcoming">–ü—Ä–∏–≤–µ—Ç–ª–∏–≤–∞—è</option>
              <option value="creepy">–ñ—É—Ç–∫–∞—è</option>
              <option value="mysterious">–ó–∞–≥–∞–¥–æ—á–Ω–∞—è</option>
              <option value="dangerous">–û–ø–∞—Å–Ω–∞—è</option>
              <option value="peaceful">–ú–∏—Ä–Ω–∞—è</option>
            </Select>

            <Button onClick={generateLocation} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 6. –û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –≤ –±–æ—é */}
        <Card>
          <h3 className="text-xl font-bold mb-4">‚öîÔ∏è –û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ</h3>
          <div className="space-y-3">
            <Input
              label="–û–∫—Ä—É–∂–µ–Ω–∏–µ (–æ–ø—Ü.)"
              value={complicationEnvironment}
              onChange={(e) => setComplicationEnvironment(e.target.value)}
              placeholder="–õ–µ—Å, –ø–µ—â–µ—Ä–∞, –≥–æ—Ä–æ–¥..."
            />
            <p className="text-sm text-gray-400">
              –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –±–æ–π
            </p>

            <Button onClick={generateComplication} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 7. –°—é–∂–µ—Ç–Ω—ã–π —Ç–≤–∏—Å—Ç */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üîÆ –¢–≤–∏—Å—Ç</h3>
          <div className="space-y-3">
            <Input
              label="–ö–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü.)"
              value={twistContext}
              onChange={(e) => setTwistContext(e.target.value)}
              placeholder="–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è..."
            />
            <Select
              label="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å"
              value={twistIntensity}
              onChange={(e) => setTwistIntensity(e.target.value as any)}
            >
              <option value="minor">–õ—ë–≥–∫–∏–π</option>
              <option value="moderate">–°—Ä–µ–¥–Ω–∏–π</option>
              <option value="major">–°–µ—Ä—å—ë–∑–Ω—ã–π</option>
            </Select>

            <Button onClick={generateTwist} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>

        {/* 8. –î–∏–∞–ª–æ–≥ NPC */}
        <Card>
          <h3 className="text-xl font-bold mb-4">üí¨ –î–∏–∞–ª–æ–≥</h3>
          <div className="space-y-3">
            <Input
              label="–¢–∏–ø NPC"
              value={dialogueNpcType}
              onChange={(e) => setDialogueNpcType(e.target.value)}
              placeholder="–°—Ç—Ä–∞–∂–Ω–∏–∫, —Ç–æ—Ä–≥–æ–≤–µ—Ü, –º—É–¥—Ä–µ—Ü..."
            />
            <Input
              label="–°–∏—Ç—É–∞—Ü–∏—è"
              value={dialogueSituation}
              onChange={(e) => setDialogueSituation(e.target.value)}
              placeholder="–î–æ–ø—Ä–æ—Å, —Ç–æ—Ä–≥–æ–≤–ª—è, –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏..."
            />

            <Button onClick={generateDialogue} disabled={loading} fullWidth>
              {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </Card>
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
      {history.length > 0 && (
        <div className="mt-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold">üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
            <Button variant="ghost" size="sm" onClick={clearHistory}>
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            </Button>
          </div>

          <div className="space-y-4">
            {history.map((item) => (
              <Card key={item.id} className="relative">
                <button
                  onClick={() => removeFromHistory(item.id)}
                  className="absolute top-4 right-4 text-gray-500 hover:text-red-500 transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  ‚úï
                </button>

                <div className="mb-2 flex items-center space-x-2">
                  <span className="text-primary font-bold">
                    {getTypeLabel(item.type)}
                  </span>
                  <span className="text-sm text-gray-500">
                    {item.timestamp.toLocaleTimeString('ru-RU')}
                  </span>
                </div>

                <div className="text-gray-300">
                  {renderGenerationResult(item.type, item.data)}
                </div>
              </Card>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTypeLabel(type: string): string {
  const labels: Record<string, string> = {
    name: 'üé≠ –ò–º—è',
    npc: 'üë§ NPC',
    event: 'üé≤ –°–æ–±—ã—Ç–∏–µ',
    loot: 'üíé –ù–∞—Ö–æ–¥–∫–∞',
    location: 'üè∞ –õ–æ–∫–∞—Ü–∏—è',
    complication: '‚öîÔ∏è –û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ',
    twist: 'üîÆ –¢–≤–∏—Å—Ç',
    dialogue: 'üí¨ –î–∏–∞–ª–æ–≥',
  };
  return labels[type] || type;
}

function renderGenerationResult(type: string, data: any) {
  switch (type) {
    case 'name':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-1">{data.name}</p>
          {data.nickname && <p className="text-sm text-gray-400 mb-2">–ü—Ä–æ–∑–≤–∏—â–µ: {data.nickname}</p>}
          <p className="text-sm">{data.flavor}</p>
        </div>
      );

    case 'npc':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-1">{data.name}</p>
          <p className="text-sm text-gray-400 mb-2">{data.race}</p>
          <p className="mb-2">{data.appearance}</p>
          <p className="text-sm mb-1"><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> {data.personality}</p>
          <p className="text-sm mb-1"><strong>–ü—Ä–∏—á—É–¥–∞:</strong> {data.quirk}</p>
          {data.catchphrase && <p className="text-sm italic text-primary">"{data.catchphrase}"</p>}
          {data.secret && <p className="text-sm mt-2 text-yellow-400">üîí –°–µ–∫—Ä–µ—Ç: {data.secret}</p>}
        </div>
      );

    case 'event':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-2">{data.title}</p>
          <p className="mb-3">{data.description}</p>
          <div className="mb-2">
            <p className="text-sm font-bold text-gray-400 mb-1">–ß—Ç–æ –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä–æ–∫–∏:</p>
            <ul className="list-disc list-inside text-sm space-y-1">
              {data.possibleActions.map((action: string, i: number) => (
                <li key={i}>{action}</li>
              ))}
            </ul>
          </div>
          <div className="text-sm space-y-1">
            <p><strong className="text-green-400">–ï—Å–ª–∏ –ø–æ–º–æ–≥—É—Ç:</strong> {data.consequences.if_help}</p>
            <p><strong className="text-gray-400">–ï—Å–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç:</strong> {data.consequences.if_ignore}</p>
          </div>
        </div>
      );

    case 'loot':
      return (
        <div>
          {data.items.map((item: any, i: number) => (
            <div key={i} className="mb-3">
              <p className="font-bold text-primary">{item.name}</p>
              <p className="text-sm mb-1">{item.description}</p>
              <p className="text-sm text-yellow-400">–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.value}</p>
              {item.interesting_detail && (
                <p className="text-sm text-gray-400 italic">‚ú® {item.interesting_detail}</p>
              )}
              {item.potential_use && (
                <p className="text-sm text-blue-400">üí° {item.potential_use}</p>
              )}
            </div>
          ))}
          {data.total_gold && <p className="text-yellow-400 font-bold">üí∞ –ó–æ–ª–æ—Ç–æ: {data.total_gold}</p>}
        </div>
      );

    case 'location':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-2">{data.name}</p>
          <p className="mb-3">{data.description}</p>
          <div className="mb-2">
            <p className="text-sm font-bold text-gray-400 mb-1">–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</p>
            <ul className="list-disc list-inside text-sm space-y-1">
              {data.key_features.map((feature: string, i: number) => (
                <li key={i}>{feature}</li>
              ))}
            </ul>
          </div>
          <div className="mb-2">
            <p className="text-sm font-bold text-gray-400 mb-1">–°–∫—Ä—ã—Ç—ã–µ –¥–µ—Ç–∞–ª–∏:</p>
            <ul className="list-disc list-inside text-sm space-y-1">
              {data.hidden_details.map((detail: string, i: number) => (
                <li key={i} className="text-yellow-400">{detail}</li>
              ))}
            </ul>
          </div>
          <p className="text-sm italic text-gray-500 mt-2">üí≠ {data.atmosphere_note}</p>
        </div>
      );

    case 'complication':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-2">{data.title}</p>
          <p className="mb-2">{data.description}</p>
          <p className="text-sm mb-2"><strong className="text-red-400">–≠—Ñ—Ñ–µ–∫—Ç:</strong> {data.mechanical_effect}</p>
          <p className="text-sm"><strong className="text-blue-400">–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è:</strong> {data.how_to_resolve}</p>
        </div>
      );

    case 'twist':
      return (
        <div>
          <p className="text-xl font-bold text-primary mb-2">{data.title}</p>
          <p className="mb-3">{data.revelation}</p>
          <div className="mb-2">
            <p className="text-sm font-bold text-gray-400 mb-1">–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:</p>
            <ul className="list-disc list-inside text-sm space-y-1">
              {data.implications.map((impl: string, i: number) => (
                <li key={i}>{impl}</li>
              ))}
            </ul>
          </div>
          <p className="text-sm italic text-blue-400 mt-2">üí° –ö–∞–∫ –≤–≤–µ—Å—Ç–∏: {data.how_to_introduce}</p>
        </div>
      );

    case 'dialogue':
      return (
        <div>
          <div className="mb-3">
            <p className="text-sm font-bold text-gray-400 mb-2">–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–ø–ª–∏–∫:</p>
            <ul className="space-y-2">
              {data.dialogue_options.map((option: string, i: number) => (
                <li key={i} className="text-sm italic text-primary">"{option}"</li>
              ))}
            </ul>
          </div>
          <p className="text-sm mb-1"><strong>–Ø–∑—ã–∫ —Ç–µ–ª–∞:</strong> {data.body_language}</p>
          <p className="text-sm"><strong>–ì–æ–ª–æ—Å:</strong> {data.voice_note}</p>
        </div>
      );

    default:
      return <pre className="text-xs">{JSON.stringify(data, null, 2)}</pre>;
  }
}

