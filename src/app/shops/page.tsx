'use client';

import { useState } from 'react';
import Card from '@/components/Card';
import Button from '@/components/Button';
import Select from '@/components/Select';
import Input from '@/components/Input';

interface ShopItem {
  name: string;
  price: string;
  rarity: 'common' | 'uncommon' | 'rare' | 'very_rare' | 'legendary';
  description: string;
  quantity: number;
}

interface Shop {
  name: string;
  type: string;
  owner: {
    name: string;
    race: string;
    personality: string;
    quirk: string;
  };
  description: string;
  atmosphere: string;
  specialties: string[];
  items: ShopItem[];
  services: string[];
  rumors: string[];
  hooks: string[];
}

export default function ShopsPage() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedShop, setGeneratedShop] = useState<Shop | null>(null);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [shopType, setShopType] = useState<'general' | 'weapons' | 'armor' | 'magic' | 'alchemy' | 'tavern' | 'blacksmith' | 'temple'>('general');
  const [settlement, setSettlement] = useState<'village' | 'town' | 'city' | 'metropolis'>('town');
  const [wealth, setWealth] = useState<'poor' | 'modest' | 'comfortable' | 'wealthy' | 'aristocratic'>('comfortable');
  const [specialty, setSpecialty] = useState('');

  const generateShop = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/generate/shop', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          shopType,
          settlement,
          wealth,
          specialty: specialty || undefined,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Shop generation failed');
      }

      setGeneratedShop(data.shop);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  const getRarityColor = (rarity: string) => {
    const colors = {
      common: 'text-gray-400',
      uncommon: 'text-green-400',
      rare: 'text-blue-400',
      very_rare: 'text-purple-400',
      legendary: 'text-orange-400',
    };
    return colors[rarity as keyof typeof colors] || 'text-gray-400';
  };

  const getRarityLabel = (rarity: string) => {
    const labels = {
      common: '–û–±—ã—á–Ω—ã–π',
      uncommon: '–ù–µ–æ–±—ã—á–Ω—ã–π', 
      rare: '–†–µ–¥–∫–∏–π',
      very_rare: '–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–π',
      legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
    };
    return labels[rarity as keyof typeof labels] || rarity;
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-2">üè™ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤</h1>
        <p className="text-gray-400">
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π
        </p>
      </div>

      {/* Error message */}
      {error && (
        <Card className="bg-red-900/20 border-red-500">
          <p className="text-red-400">{error}</p>
        </Card>
      )}

      {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä */}
      <Card>
        <h2 className="text-2xl font-bold mb-6">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <Select
            label="–¢–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞"
            value={shopType}
            onChange={(e) => setShopType(e.target.value as any)}
          >
            <option value="general">üè™ –û–±—â–∏–π –º–∞–≥–∞–∑–∏–Ω</option>
            <option value="weapons">‚öîÔ∏è –û—Ä—É–∂–µ–π–Ω–∞—è</option>
            <option value="armor">üõ°Ô∏è –î–æ—Å–ø–µ—Ö–∏</option>
            <option value="magic">üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã</option>
            <option value="alchemy">‚öóÔ∏è –ê–ª—Ö–∏–º–∏—è</option>
            <option value="tavern">üç∫ –¢–∞–≤–µ—Ä–Ω–∞</option>
            <option value="blacksmith">üî® –ö—É–∑–Ω–∏—Ü–∞</option>
            <option value="temple">‚õ™ –•—Ä–∞–º</option>
          </Select>

          <Select
            label="–†–∞–∑–º–µ—Ä –ø–æ—Å–µ–ª–µ–Ω–∏—è"
            value={settlement}
            onChange={(e) => setSettlement(e.target.value as any)}
          >
            <option value="village">üèòÔ∏è –î–µ—Ä–µ–≤–Ω—è</option>
            <option value="town">üèòÔ∏è –ì–æ—Ä–æ–¥–æ–∫</option>
            <option value="city">üèôÔ∏è –ì–æ—Ä–æ–¥</option>
            <option value="metropolis">üåÜ –ú–µ–≥–∞–ø–æ–ª–∏—Å</option>
          </Select>

          <Select
            label="–£—Ä–æ–≤–µ–Ω—å –±–æ–≥–∞—Ç—Å—Ç–≤–∞"
            value={wealth}
            onChange={(e) => setWealth(e.target.value as any)}
          >
            <option value="poor">üí∏ –ë–µ–¥–Ω—ã–π</option>
            <option value="modest">üí∞ –°–∫—Ä–æ–º–Ω—ã–π</option>
            <option value="comfortable">üíé –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π</option>
            <option value="wealthy">üëë –ë–æ–≥–∞—Ç—ã–π</option>
            <option value="aristocratic">üíç –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π</option>
          </Select>

          <Input
            label="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–æ–ø—Ü.)"
            value={specialty}
            onChange={(e) => setSpecialty(e.target.value)}
            placeholder="–≠–ª—å—Ñ–∏–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã..."
          />
        </div>

        <Button onClick={generateShop} disabled={loading} size="lg" className="w-full">
          {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞...' : 'üè™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
        </Button>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {generatedShop && (
        <div className="space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card>
            <div className="flex items-start justify-between mb-4">
              <div>
                <h2 className="text-3xl font-bold text-primary mb-2">{generatedShop.name}</h2>
                <p className="text-lg text-gray-300 mb-2">{generatedShop.type}</p>
                <p className="text-gray-400">{generatedShop.description}</p>
              </div>
            </div>

            <div className="bg-gray-900/50 p-4 rounded-lg mb-4">
              <h3 className="text-lg font-bold mb-2">üé≠ –í–ª–∞–¥–µ–ª–µ—Ü</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-xl font-bold text-secondary">{generatedShop.owner.name}</p>
                  <p className="text-gray-400">{generatedShop.owner.race}</p>
                </div>
                <div>
                  <p className="text-sm mb-1"><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> {generatedShop.owner.personality}</p>
                  <p className="text-sm"><strong>–ü—Ä–∏—á—É–¥–∞:</strong> {generatedShop.owner.quirk}</p>
                </div>
              </div>
            </div>

            <div className="mb-4">
              <h3 className="text-lg font-bold mb-2">üè™ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞</h3>
              <p className="text-gray-300">{generatedShop.atmosphere}</p>
            </div>

            {generatedShop.specialties.length > 0 && (
              <div>
                <h3 className="text-lg font-bold mb-2">‚≠ê –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
                <div className="flex flex-wrap gap-2">
                  {generatedShop.specialties.map((specialty, index) => (
                    <span key={index} className="bg-primary/20 text-primary px-3 py-1 rounded-full text-sm">
                      {specialty}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </Card>

          {/* –¢–æ–≤–∞—Ä—ã */}
          <Card>
            <h3 className="text-2xl font-bold mb-4">üõçÔ∏è –¢–æ–≤–∞—Ä—ã</h3>
            <div className="space-y-3">
              {generatedShop.items.map((item, index) => (
                <div key={index} className="bg-gray-900/50 p-4 rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <h4 className="text-lg font-bold text-primary">{item.name}</h4>
                      <p className="text-sm text-gray-400 mb-2">{item.description}</p>
                    </div>
                    <div className="text-right ml-4">
                      <p className="text-xl font-bold text-yellow-400">{item.price}</p>
                      <p className={`text-sm ${getRarityColor(item.rarity)}`}>
                        {getRarityLabel(item.rarity)}
                      </p>
                      <p className="text-xs text-gray-500">–í –Ω–∞–ª–∏—á–∏–∏: {item.quantity}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          {/* –£—Å–ª—É–≥–∏ */}
          {generatedShop.services.length > 0 && (
            <Card>
              <h3 className="text-2xl font-bold mb-4">üîß –£—Å–ª—É–≥–∏</h3>
              <ul className="space-y-2">
                {generatedShop.services.map((service, index) => (
                  <li key={index} className="flex items-center space-x-2">
                    <span className="text-secondary">‚Ä¢</span>
                    <span>{service}</span>
                  </li>
                ))}
              </ul>
            </Card>
          )}

          {/* –°–ª—É—Ö–∏ –∏ –∑–∞—Ü–µ–ø–∫–∏ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {generatedShop.rumors.length > 0 && (
              <Card>
                <h3 className="text-xl font-bold mb-4">üí¨ –°–ª—É—Ö–∏</h3>
                <ul className="space-y-2">
                  {generatedShop.rumors.map((rumor, index) => (
                    <li key={index} className="text-sm text-gray-300 italic">
                      "{rumor}"
                    </li>
                  ))}
                </ul>
              </Card>
            )}

            {generatedShop.hooks.length > 0 && (
              <Card>
                <h3 className="text-xl font-bold mb-4">üé£ –ó–∞—Ü–µ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π</h3>
                <ul className="space-y-2">
                  {generatedShop.hooks.map((hook, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <span className="text-primary mt-1">‚Ä¢</span>
                      <span className="text-sm">{hook}</span>
                    </li>
                  ))}
                </ul>
              </Card>
            )}
          </div>
        </div>
      )}
    </div>
  );
}