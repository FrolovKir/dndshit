'use client';

import { useState } from 'react';
import Card from '@/components/Card';
import Button from '@/components/Button';
import Select from '@/components/Select';
import Textarea from '@/components/Textarea';
import Input from '@/components/Input';

type ImageType = 'character' | 'location' | 'item' | 'scene';

interface GeneratedImage {
  id: string;
  type: ImageType;
  imageUrl: string;
  originalPrompt: string;
  revisedPrompt: string;
  description: string;
  timestamp: Date;
  size: string;
}

export default function VisualizePage() {
  const [activeTab, setActiveTab] = useState<ImageType>('character');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [history, setHistory] = useState<GeneratedImage[]>([]);

  // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const [description, setDescription] = useState('');
  const [style, setStyle] = useState('fantasy_art');

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const [race, setRace] = useState('');
  const [characterClass, setCharacterClass] = useState('');
  const [age, setAge] = useState('');
  const [mood, setMood] = useState('');

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–∞—Ü–∏–∏
  const [locationType, setLocationType] = useState('');
  const [timeOfDay, setTimeOfDay] = useState<'dawn' | 'day' | 'sunset' | 'night'>('day');
  const [weather, setWeather] = useState<'clear' | 'fog' | 'rain' | 'snow' | 'storm'>('clear');
  const [atmosphere, setAtmosphere] = useState('');

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–∞
  const [itemType, setItemType] = useState('');
  const [rarity, setRarity] = useState<'common' | 'uncommon' | 'rare' | 'legendary'>('uncommon');
  const [magicalEffect, setMagicalEffect] = useState('');

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω—ã
  const [scale, setScale] = useState<'duel' | 'skirmish' | 'battle' | 'war'>('skirmish');
  const [environment, setEnvironment] = useState('');

  const generateImage = async () => {
    if (!description.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const params: any = {
        type: activeTab,
        description,
        style,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (activeTab === 'character') {
        if (race) params.race = race;
        if (characterClass) params.characterClass = characterClass;
        if (age) params.age = age;
        if (mood) params.mood = mood;
      } else if (activeTab === 'location') {
        if (locationType) params.locationType = locationType;
        params.timeOfDay = timeOfDay;
        params.weather = weather;
        if (atmosphere) params.atmosphere = atmosphere;
      } else if (activeTab === 'item') {
        if (itemType) params.itemType = itemType;
        params.rarity = rarity;
        if (magicalEffect) params.magicalEffect = magicalEffect;
      } else if (activeTab === 'scene') {
        params.scale = scale;
        if (environment) params.environment = environment;
      }

      const response = await fetch('/api/generate/image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || data.message || 'Generation failed');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const newImage: GeneratedImage = {
        id: Math.random().toString(36).substr(2, 9),
        type: activeTab,
        imageUrl: data.imageUrl,
        originalPrompt: data.originalPrompt,
        revisedPrompt: data.revisedPrompt,
        description,
        timestamp: new Date(),
        size: data.size,
      };

      setHistory([newImage, ...history]);
      setDescription(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  const downloadImage = async (imageUrl: string, filename: string) => {
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Download failed:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  };

  const clearHistory = () => {
    setHistory([]);
  };

  const removeFromHistory = (id: string) => {
    setHistory(history.filter((item) => item.id !== id));
  };

  const tabs = [
    { id: 'character', label: 'üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂', icon: 'üë§' },
    { id: 'location', label: 'üè∞ –õ–æ–∫–∞—Ü–∏—è', icon: 'üè∞' },
    { id: 'item', label: '‚öîÔ∏è –ü—Ä–µ–¥–º–µ—Ç', icon: '‚öîÔ∏è' },
    { id: 'scene', label: '‚ö° –°—Ü–µ–Ω–∞', icon: '‚ö°' },
  ];

  const examples = {
    character: [
      '–°—Ç–∞—Ä—ã–π –¥–≤–∞—Ä—Ñ-–∫—É–∑–Ω–µ—Ü —Å –æ–≥–Ω–µ–Ω–Ω–æ-—Ä—ã–∂–µ–π –±–æ—Ä–æ–¥–æ–π, –º—É—Å–∫—É–ª–∏—Å—Ç—ã–π, –≤ –∫–æ–∂–∞–Ω–æ–º —Ñ–∞—Ä—Ç—É–∫–µ, –¥–µ—Ä–∂–∏—Ç –º–æ–ª–æ—Ç, –ª–∏—Ü–æ –≤ —à—Ä–∞–º–∞—Ö –æ—Ç –∏—Å–∫—Ä',
      '–ú–æ–ª–æ–¥–∞—è —ç–ª—å—Ñ–∏–π–∫–∞-–¥—Ä—É–∏–¥ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –±–µ–ª—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, —Ü–≤–µ—Ç—ã –≤ –≤–æ–ª–æ—Å–∞—Ö, –∑–µ–ª—ë–Ω—ã–µ –≥–ª–∞–∑–∞, —Å–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π',
      '–°—É—Ä–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫-–ø–∞–ª–∞–¥–∏–Ω –≤ —Ç—è–∂—ë–ª–æ–π –±—Ä–æ–Ω–µ, —â–∏—Ç —Å —Å–∏–º–≤–æ–ª–æ–º —Å–æ–ª–Ω—Ü–∞, —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥',
    ],
    location: [
      '–î—Ä–µ–≤–Ω—è—è —Ç–∞–≤–µ—Ä–Ω–∞ —Å –Ω–∏–∑–∫–∏–º–∏ –ø–æ—Ç–æ–ª–∫–∞–º–∏, –±–æ–ª—å—à–æ–π –∫–∞–º–∏–Ω, –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã, —Ç—É—Å–∫–ª–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å–≤–µ—á–∞–º–∏, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
      '–¢—ë–º–Ω—ã–π –ª–µ—Å –Ω–æ—á—å—é, –ª—É–Ω–∞ —Å–∫–≤–æ–∑—å –¥–µ—Ä–µ–≤—å—è, —Ç—É–º–∞–Ω —É –∑–µ–º–ª–∏, –∑–ª–æ–≤–µ—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
      '–†—É–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–≥–æ —Ö—Ä–∞–º–∞, —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–Ω—ã, –ø–æ—Ä–æ—Å—à–∏–µ –º—Ö–æ–º, –ª—É—á–∏ —Å–æ–ª–Ω—Ü–∞ —Å–∫–≤–æ–∑—å –ø—Ä–æ–ª–æ–º—ã –≤ –∫—Ä—ã—à–µ',
    ],
    item: [
      '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á —Å –≥–æ–ª—É–±—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º –ª–µ–∑–≤–∏—è, —Ä—É–Ω—ã –≤–¥–æ–ª—å –∫–ª–∏–Ω–∫–∞, —Ä—É–∫–æ—è—Ç—å –∏–∑ —Å–µ—Ä–µ–±—Ä–∞ —Å —Å–∞–ø—Ñ–∏—Ä–æ–º',
      '–î—Ä–µ–≤–Ω–∏–π —Ç–æ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–∂–∞–Ω–æ–º –ø–µ—Ä–µ–ø–ª—ë—Ç–µ, –∑–æ–ª–æ—Ç—ã–µ –∑–∞—Å—Ç—ë–∂–∫–∏, —Å–≤–µ—Ç—è—â–∏–µ—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ä—É–Ω—ã –Ω–∞ –æ–±–ª–æ–∂–∫–µ',
      '–ó–µ–ª—å–µ –≤ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–æ–º —Ñ–ª–∞–∫–æ–Ω–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Å–≤–µ—Ç—è—â–∞—è—Å—è –∂–∏–¥–∫–æ—Å—Ç—å, –ø—Ä–æ–±–∫–∞ –∏–∑ –≤–æ—Å–∫–∞ —Å –ø–µ—á–∞—Ç—å—é',
    ],
    scene: [
      '–ë–∏—Ç–≤–∞ –≥–µ—Ä–æ–µ–≤ —Å –¥—Ä–∞–∫–æ–Ω–æ–º –≤ –≥–æ—Ä–∞—Ö, –¥—Ä–∞–∫–æ–Ω –Ω–∞ —Å–∫–∞–ª–µ, –≥–µ—Ä–æ–∏ –∞—Ç–∞–∫—É—é—Ç —Å–Ω–∏–∑—É, –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
      '–î—É—ç–ª—å –¥–≤—É—Ö –≤–æ–∏–Ω–æ–≤ –Ω–∞ –º–æ—Å—Ç—É –Ω–∞–¥ –ø—Ä–æ–ø–∞—Å—Ç—å—é, –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–ª–∏–Ω–∫–∏ —Å–∫—Ä–µ—â–µ–Ω—ã',
      '–ú–∞—Å—Å–æ–≤–∞—è –±–∏—Ç–≤–∞: –∞—Ä–º–∏—è –æ—Ä–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ –ª—é–¥–µ–π –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –ø–æ–ª–µ, —ç–ø–∏—á–Ω–∞—è —Å—Ü–µ–Ω–∞',
    ],
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-2">üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
        <p className="text-gray-400">
          –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ª–æ–∫–∞—Ü–∏–π, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Å—Ü–µ–Ω –¥–ª—è –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
        </p>
      </div>

      {/* Error message */}
      {error && (
        <Card className="bg-red-900/20 border-red-500">
          <p className="text-red-400">{error}</p>
        </Card>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex space-x-2 border-b border-gray-800 pb-2">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id as ImageType)}
            className={`px-6 py-3 rounded-t-lg font-medium transition-all ${
              activeTab === tab.id
                ? 'bg-gray-900 text-primary border-b-2 border-primary'
                : 'text-gray-400 hover:text-gray-300'
            }`}
          >
            {tab.label}
          </button>
        ))}
      </div>

      {/* –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
      <Card>
        <div className="space-y-4">
          {/* –ì–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium mb-2">
              üìù –û–ø–∏—Å–∞–Ω–∏–µ <span className="text-red-500">*</span>
            </label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder={`–û–ø–∏—à–∏—Ç–µ ${activeTab === 'character' ? '–ø–µ—Ä—Å–æ–Ω–∞–∂–∞' : activeTab === 'location' ? '–ª–æ–∫–∞—Ü–∏—é' : activeTab === 'item' ? '–ø—Ä–µ–¥–º–µ—Ç' : '—Å—Ü–µ–Ω—É'}...`}
              rows={4}
            />
            <p className="text-xs text-gray-500 mt-1">
              –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            </p>
          </div>

          {/* –ü—Ä–∏–º–µ—Ä—ã */}
          <details className="text-sm">
            <summary className="cursor-pointer text-primary hover:text-primary-light">
              üí° –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π
            </summary>
            <ul className="mt-2 space-y-1 text-gray-400">
              {examples[activeTab].map((example, i) => (
                <li
                  key={i}
                  className="cursor-pointer hover:text-primary"
                  onClick={() => setDescription(example)}
                >
                  ‚Ä¢ {example}
                </li>
              ))}
            </ul>
          </details>

          {/* –û–±—â–∏–π —Å—Ç–∏–ª—å */}
          <Select label="üé® –°—Ç–∏–ª—å" value={style} onChange={(e) => setStyle(e.target.value)}>
            {activeTab === 'character' && (
              <>
                <option value="fantasy_art">–§—ç–Ω—Ç–µ–∑–∏-–∞—Ä—Ç (D&D —Å—Ç–∏–ª—å)</option>
                <option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</option>
                <option value="concept_art">–ö–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç</option>
                <option value="token">–¢–æ–∫–µ–Ω –¥–ª—è VTT</option>
                <option value="painting">–ñ–∏–≤–æ–ø–∏—Å—å</option>
                <option value="comic">–ö–æ–º–∏–∫—Å</option>
              </>
            )}
            {activeTab === 'location' && (
              <>
                <option value="fantasy_art">–§—ç–Ω—Ç–µ–∑–∏-–∞—Ä—Ç</option>
                <option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</option>
                <option value="concept_art">–ö–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç</option>
                <option value="painting">–ñ–∏–≤–æ–ø–∏—Å—å</option>
              </>
            )}
            {activeTab === 'item' && (
              <>
                <option value="fantasy_art">–§—ç–Ω—Ç–µ–∑–∏-–∞—Ä—Ç</option>
                <option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</option>
                <option value="icon">–ò–∫–æ–Ω–∫–∞</option>
                <option value="painting">–ñ–∏–≤–æ–ø–∏—Å—å</option>
              </>
            )}
            {activeTab === 'scene' && (
              <>
                <option value="fantasy_art">–§—ç–Ω—Ç–µ–∑–∏-–∞—Ä—Ç</option>
                <option value="epic">–≠–ø–∏—á–Ω—ã–π</option>
                <option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</option>
                <option value="concept_art">–ö–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç</option>
                <option value="painting">–ñ–∏–≤–æ–ø–∏—Å—å</option>
              </>
            )}
          </Select>

          {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
          {activeTab === 'character' && (
            <div className="grid grid-cols-2 gap-4">
              <Input
                label="–†–∞—Å–∞ (–æ–ø—Ü.)"
                value={race}
                onChange={(e) => setRace(e.target.value)}
                placeholder="–≠–ª—å—Ñ, –¥–≤–∞—Ä—Ñ, —á–µ–ª–æ–≤–µ–∫..."
              />
              <Input
                label="–ö–ª–∞—Å—Å (–æ–ø—Ü.)"
                value={characterClass}
                onChange={(e) => setCharacterClass(e.target.value)}
                placeholder="–í–æ–∏–Ω, –º–∞–≥, –ø–ª—É—Ç..."
              />
              <Input
                label="–í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü.)"
                value={age}
                onChange={(e) => setAge(e.target.value)}
                placeholder="–ú–æ–ª–æ–¥–æ–π, —Å—Ä–µ–¥–Ω–∏—Ö –ª–µ—Ç, —Å—Ç–∞—Ä—ã–π..."
              />
              <Input
                label="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–æ–ø—Ü.)"
                value={mood}
                onChange={(e) => setMood(e.target.value)}
                placeholder="–ì—Ä–æ–∑–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∑–∞–≥–∞–¥–æ—á–Ω—ã–π..."
              />
            </div>
          )}

          {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ */}
          {activeTab === 'location' && (
            <div className="grid grid-cols-2 gap-4">
              <Input
                label="–¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏ (–æ–ø—Ü.)"
                value={locationType}
                onChange={(e) => setLocationType(e.target.value)}
                placeholder="–¢–∞–≤–µ—Ä–Ω–∞, –ª–µ—Å, –ø–æ–¥–∑–µ–º–µ–ª—å–µ..."
              />
              <Select
                label="–í—Ä–µ–º—è —Å—É—Ç–æ–∫"
                value={timeOfDay}
                onChange={(e) => setTimeOfDay(e.target.value as any)}
              >
                <option value="dawn">–†–∞—Å—Å–≤–µ—Ç</option>
                <option value="day">–î–µ–Ω—å</option>
                <option value="sunset">–ó–∞–∫–∞—Ç</option>
                <option value="night">–ù–æ—á—å</option>
              </Select>
              <Select label="–ü–æ–≥–æ–¥–∞" value={weather} onChange={(e) => setWeather(e.target.value as any)}>
                <option value="clear">–Ø—Å–Ω–æ</option>
                <option value="fog">–¢—É–º–∞–Ω</option>
                <option value="rain">–î–æ–∂–¥—å</option>
                <option value="snow">–°–Ω–µ–≥</option>
                <option value="storm">–ì—Ä–æ–∑–∞</option>
              </Select>
              <Input
                label="–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ (–æ–ø—Ü.)"
                value={atmosphere}
                onChange={(e) => setAtmosphere(e.target.value)}
                placeholder="–ú—Ä–∞—á–Ω–∞—è, —É—é—Ç–Ω–∞—è, –∑–ª–æ–≤–µ—â–∞—è..."
              />
            </div>
          )}

          {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ */}
          {activeTab === 'item' && (
            <div className="grid grid-cols-2 gap-4">
              <Input
                label="–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ–ø—Ü.)"
                value={itemType}
                onChange={(e) => setItemType(e.target.value)}
                placeholder="–ú–µ—á, –∑–µ–ª—å–µ, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç..."
              />
              <Select label="–†–µ–¥–∫–æ—Å—Ç—å" value={rarity} onChange={(e) => setRarity(e.target.value as any)}>
                <option value="common">–û–±—ã—á–Ω—ã–π</option>
                <option value="uncommon">–ù–µ–æ–±—ã—á–Ω—ã–π</option>
                <option value="rare">–†–µ–¥–∫–∏–π</option>
                <option value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π</option>
              </Select>
              <Input
                label="–ú–∞–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç (–æ–ø—Ü.)"
                value={magicalEffect}
                onChange={(e) => setMagicalEffect(e.target.value)}
                placeholder="–û–≥–æ–Ω—å, –ª—ë–¥, —Ç—å–º–∞, —Å–≤–µ—Ç..."
                className="col-span-2"
              />
            </div>
          )}

          {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã */}
          {activeTab === 'scene' && (
            <div className="grid grid-cols-2 gap-4">
              <Select label="–ú–∞—Å—à—Ç–∞–±" value={scale} onChange={(e) => setScale(e.target.value as any)}>
                <option value="duel">–î—É—ç–ª—å</option>
                <option value="skirmish">–°—Ç—ã—á–∫–∞</option>
                <option value="battle">–ë–∏—Ç–≤–∞</option>
                <option value="war">–í–æ–π–Ω–∞</option>
              </Select>
              <Input
                label="–û–∫—Ä—É–∂–µ–Ω–∏–µ (–æ–ø—Ü.)"
                value={environment}
                onChange={(e) => setEnvironment(e.target.value)}
                placeholder="–õ–µ—Å, –ø–µ—â–µ—Ä–∞, –∑–∞–º–æ–∫..."
              />
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          <Button onClick={generateImage} disabled={loading || !description.trim()} fullWidth size="lg">
            {loading ? 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫)' : 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
          </Button>

          <p className="text-xs text-gray-500 text-center">
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4o image generation ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç OPENAI_API_KEY
          </p>
        </div>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
      {history.length > 0 && (
        <div className="mt-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold">üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
            <Button variant="ghost" size="sm" onClick={clearHistory}>
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {history.map((item) => (
              <Card key={item.id} className="relative overflow-hidden">
                <button
                  onClick={() => removeFromHistory(item.id)}
                  className="absolute top-4 right-4 z-10 bg-black/50 hover:bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  ‚úï
                </button>

                {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div className="mb-4">
                  <img
                    src={item.imageUrl}
                    alt={item.description}
                    className="w-full h-auto rounded-lg"
                  />
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-primary font-bold">{getTypeLabel(item.type)}</span>
                    <span className="text-sm text-gray-500">
                      {item.timestamp.toLocaleTimeString('ru-RU')}
                    </span>
                  </div>

                  <p className="text-sm text-gray-300 line-clamp-2">{item.description}</p>

                  <details className="text-xs text-gray-500">
                    <summary className="cursor-pointer hover:text-primary">–ü—Ä–æ–º–ø—Ç</summary>
                    <p className="mt-1 text-gray-400">{item.revisedPrompt}</p>
                  </details>

                  <div className="flex space-x-2 mt-3">
                    <Button
                      size="sm"
                      fullWidth
                      onClick={() =>
                        downloadImage(
                          item.imageUrl,
                          `${item.type}_${item.id}.png`
                        )
                      }
                    >
                      üíæ –°–∫–∞—á–∞—Ç—å
                    </Button>
                    <Button
                      variant="secondary"
                      size="sm"
                      fullWidth
                      onClick={() => window.open(item.imageUrl, '_blank')}
                    >
                      üîç –û—Ç–∫—Ä—ã—Ç—å
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

function getTypeLabel(type: ImageType): string {
  const labels: Record<ImageType, string> = {
    character: 'üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂',
    location: 'üè∞ –õ–æ–∫–∞—Ü–∏—è',
    item: '‚öîÔ∏è –ü—Ä–µ–¥–º–µ—Ç',
    scene: '‚ö° –°—Ü–µ–Ω–∞',
  };
  return labels[type];
}

