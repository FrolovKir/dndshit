/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—É—â–µ–π –ë–î –≤ JSON
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å SQLite –Ω–∞ PostgreSQL
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function main() {
  console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...');

  try {
    const data = {
      users: await prisma.user.findMany({
        include: {
          creditBudget: true,
        },
      }),
      projects: await prisma.project.findMany({
        include: {
          scenes: true,
          npcs: true,
          encounters: true,
          quests: true,
          playerCharacters: true,
          sessions: true,
        },
      }),
    };

    const outputPath = path.join(process.cwd(), 'data-export.json');
    fs.writeFileSync(outputPath, JSON.stringify(data, null, 2));

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.users.length}`);
    console.log(`   –ü—Ä–æ–µ–∫—Ç–æ–≤: ${data.projects.length}`);
    console.log(`   –°—Ü–µ–Ω: ${data.projects.reduce((sum, p) => sum + p.scenes.length, 0)}`);
    console.log(`   NPC: ${data.projects.reduce((sum, p) => sum + p.npcs.length, 0)}`);
    console.log(`   –≠–Ω–∫–∞—É–Ω—Ç–µ—Ä–æ–≤: ${data.projects.reduce((sum, p) => sum + p.encounters.length, 0)}`);
    console.log(`   –ö–≤–µ—Å—Ç–æ–≤: ${data.projects.reduce((sum, p) => sum + p.quests.length, 0)}`);
    console.log(`   –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–æ–≤: ${data.projects.reduce((sum, p) => sum + p.playerCharacters.length, 0)}`);
    console.log(`   –°–µ—Å—Å–∏–π: ${data.projects.reduce((sum, p) => sum + p.sessions.length, 0)}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main();

