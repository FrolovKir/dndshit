/**
 * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ –ë–î
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ production PostgreSQL
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function main() {
  console.log('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');

  const inputPath = path.join(process.cwd(), 'data-export.json');

  if (!fs.existsSync(inputPath)) {
    console.error('‚ùå –§–∞–π–ª data-export.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run export-data');
    process.exit(1);
  }

  const data = JSON.parse(fs.readFileSync(inputPath, 'utf-8'));

  try {
    console.log('üì• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const user of data.users) {
      const { creditBudget, ...userData } = user;

      await prisma.user.upsert({
        where: { id: user.id },
        create: userData,
        update: userData,
      });

      // –°–æ–∑–¥–∞—ë–º –±—é–¥–∂–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (creditBudget) {
        await prisma.creditBudget.upsert({
          where: { id: creditBudget.id },
          create: creditBudget,
          update: creditBudget,
        });
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    for (const project of data.projects) {
      const { scenes, npcs, encounters, quests, playerCharacters, sessions, ...projectData } = project;

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
      await prisma.project.upsert({
        where: { id: project.id },
        create: projectData,
        update: projectData,
      });

      // –°—Ü–µ–Ω—ã
      for (const scene of scenes) {
        await prisma.scene.upsert({
          where: { id: scene.id },
          create: scene,
          update: scene,
        });
      }

      // NPC
      for (const npc of npcs) {
        await prisma.nPC.upsert({
          where: { id: npc.id },
          create: npc,
          update: npc,
        });
      }

      // –≠–Ω–∫–∞—É–Ω—Ç–µ—Ä—ã
      for (const encounter of encounters) {
        await prisma.encounter.upsert({
          where: { id: encounter.id },
          create: encounter,
          update: encounter,
        });
      }

      // –ö–≤–µ—Å—Ç—ã
      for (const quest of quests) {
        await prisma.quest.upsert({
          where: { id: quest.id },
          create: quest,
          update: quest,
        });
      }

      // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–æ–≤
      for (const pc of playerCharacters) {
        await prisma.playerCharacter.upsert({
          where: { id: pc.id },
          create: pc,
          update: pc,
        });
      }

      // –°–µ—Å—Å–∏–∏
      for (const session of sessions) {
        await prisma.session.upsert({
          where: { id: session.id },
          create: session,
          update: session,
        });
      }
    }

    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main();

